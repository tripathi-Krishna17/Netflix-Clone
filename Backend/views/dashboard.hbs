<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Netflix Clone</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Netflix+Sans:wght@300;400;500;700&display=swap');

        :root {
            --netflix-red: #E50914;
            --netflix-black: #141414;
            --netflix-gray: #808080;
            --netflix-dark: #000000;
        }

        body {
            background-color: var(--netflix-black);
            color: white;
            font-family: 'Netflix Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
            overflow-x: hidden;
        }

        #background-canvas {
            position: fixed;
            top: 0;
            left: 0;
            z-index: -1;
        }

        .glass-effect {
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .hover-scale {
            transition: transform 0.3s ease;
        }

        .hover-scale:hover {
            transform: scale(1.02);
        }

        .gradient-border {
            position: relative;
        }

        .gradient-border::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, var(--netflix-red), transparent);
        }

        .animate-pulse-slow {
            animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }

        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: .5;
            }
        }

        .stats-card {
            position: relative;
            overflow: hidden;
        }

        .stats-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transform: translateX(-100%);
            transition: transform 0.6s;
        }

        .stats-card:hover::before {
            transform: translateX(100%);
        }

        .sidebar {
            background-color: var(--netflix-dark);
            height: 100vh;
            position: fixed;
            width: 250px;
            padding: 20px;
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.3);
        }

        .netflix-logo {
            width: 120px;
            margin-bottom: 30px;
            filter: brightness(0) invert(1);
        }

        .main-content {
            margin-left: 250px;
            padding: 30px;
            background: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.4));
            min-height: 100vh;
        }

        .nav-link {
            color: var(--netflix-gray);
            padding: 12px 20px;
            margin: 5px 0;
            border-radius: 4px;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
        }

        .nav-link:hover, .nav-link.active {
            color: white;
            background-color: rgba(255, 255, 255, 0.1);
            transform: translateX(5px);
        }

        .nav-link i {
            margin-right: 12px;
            font-size: 1.1rem;
        }

        .stats-card {
            background: linear-gradient(135deg, rgba(20, 20, 20, 0.9), rgba(40, 40, 40, 0.9));
            border-radius: 8px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: transform 0.3s ease;
        }

        .stats-card:hover {
            transform: translateY(-5px);
        }

        .stats-card h3 {
            color: var(--netflix-red);
            margin-bottom: 15px;
            font-size: 1.1rem;
            font-weight: 500;
            letter-spacing: 0.5px;
        }

        .stats-number {
            font-size: 2.8rem;
            font-weight: 700;
            color: white;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .table {
            color: white;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 8px;
            overflow: hidden;
        }

        .table thead th {
            border-bottom: 2px solid var(--netflix-red);
            color: var(--netflix-red);
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 1px;
            padding: 15px;
        }

        .table tbody tr {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            transition: background-color 0.3s ease;
        }

        .table tbody tr:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .table td {
            padding: 15px;
            vertical-align: middle;
        }

        .btn-netflix {
            background-color: var(--netflix-red);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            transition: all 0.3s ease;
            font-weight: 500;
            letter-spacing: 0.5px;
        }

        .btn-netflix:hover {
            background-color: #ff0f1f;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(229, 9, 20, 0.3);
        }

        .modal-content {
            background-color: var(--netflix-dark);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        }

        .modal-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-footer {
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .form-control {
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 4px;
            padding: 10px 15px;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.15);
            border-color: var(--netflix-red);
            color: white;
            box-shadow: 0 0 0 0.2rem rgba(229, 9, 20, 0.25);
        }

        .form-label {
            color: var(--netflix-gray);
            font-size: 0.9rem;
            margin-bottom: 8px;
        }

        .toast {
            background-color: rgba(0, 0, 0, 0.9);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        .toast-header {
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card {
            background-color: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .card-header {
            background-color: rgba(0, 0, 0, 0.3);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 15px 20px;
        }

        .card-header h5 {
            margin: 0;
            color: var(--netflix-red);
            font-weight: 500;
        }

        .badge {
            padding: 6px 12px;
            font-weight: 500;
            letter-spacing: 0.5px;
        }

        .welcome-section {
            background: linear-gradient(to right, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.4));
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .welcome-section h2 {
            color: white;
            font-weight: 500;
            margin: 0;
        }

        .section-title {
            color: var(--netflix-red);
            font-size: 1.5rem;
            font-weight: 500;
            margin-bottom: 25px;
            letter-spacing: 0.5px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: #ccc;
        }

        .status-indicator.online {
            background-color: #28a745;
            box-shadow: 0 0 10px #28a745;
        }

        .status-indicator.offline {
            background-color: #dc3545;
            box-shadow: 0 0 10px #dc3545;
        }

        .progress {
            background-color: rgba(255, 255, 255, 0.1);
            height: 8px;
            border-radius: 4px;
        }

        .progress-bar {
            transition: width 0.3s ease;
        }

        .server-stats p {
            color: var(--netflix-gray);
            font-size: 0.9rem;
        }

        /* Modal Styles */
        .modal-dialog {
            max-width: 500px;
            margin: 1.75rem auto;
        }

        .modal-content {
            background: rgba(20, 20, 20, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        }

        .modal.fade .modal-dialog {
            transition: transform 0.3s ease-out;
            transform: scale(0.95);
        }

        .modal.show .modal-dialog {
            transform: scale(1);
        }

        .modal-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
        }

        .form-control {
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.15);
            border-color: var(--netflix-red);
            box-shadow: 0 0 0 2px rgba(229, 9, 20, 0.25);
        }

        .btn-close-white {
            filter: invert(1) grayscale(100%) brightness(200%);
        }
    </style>
</head>
<body>
    <canvas id="background-canvas"></canvas>

    <!-- Sidebar -->
    <div class="fixed top-0 left-0 h-screen w-64 bg-black/90 backdrop-blur-lg border-r border-white/10 p-6 z-50">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/200px-Netflix_2015_logo.svg.png" 
             alt="Netflix Logo" 
             class="w-32 mb-8 filter brightness-0 invert">
        
        <nav class="space-y-2">
            <a href="#overview" class="flex items-center space-x-3 p-3 rounded-lg text-gray-400 hover:bg-white/10 hover:text-white transition-all duration-300">
                <i class="bi bi-speedometer2 text-xl"></i>
                <span>Overview</span>
            </a>
            <a href="#movies" class="flex items-center space-x-3 p-3 rounded-lg text-gray-400 hover:bg-white/10 hover:text-white transition-all duration-300">
                <i class="bi bi-film text-xl"></i>
                <span>Movies</span>
            </a>
            <a href="#tvshows" class="flex items-center space-x-3 p-3 rounded-lg text-gray-400 hover:bg-white/10 hover:text-white transition-all duration-300">
                <i class="bi bi-tv text-xl"></i>
                <span>TV Shows</span>
            </a>
            <a href="#users" class="flex items-center space-x-3 p-3 rounded-lg text-gray-400 hover:bg-white/10 hover:text-white transition-all duration-300">
                <i class="bi bi-people text-xl"></i>
                <span>Users</span>
            </a>
            <a href="#server" class="flex items-center space-x-3 p-3 rounded-lg text-gray-400 hover:bg-white/10 hover:text-white transition-all duration-300">
                <i class="bi bi-hdd-network text-xl"></i>
                <span>Server</span>
            </a>
            <a href="#settings" class="flex items-center space-x-3 p-3 rounded-lg text-gray-400 hover:bg-white/10 hover:text-white transition-all duration-300">
                <i class="bi bi-gear text-xl"></i>
                <span>Settings</span>
            </a>
            <a href="/admin/logout" class="flex items-center space-x-3 p-3 rounded-lg text-red-500 hover:bg-red-500/10 transition-all duration-300">
                <i class="bi bi-box-arrow-right text-xl"></i>
                <span>Logout</span>
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="ml-64 p-8">
        <!-- Welcome Section -->
        <div class="glass-effect rounded-xl p-6 mb-8 flex justify-between items-center">
            <h1 class="text-2xl font-bold">Welcome, {{user.username}}</h1>
            <span class="px-4 py-2 bg-red-600 rounded-full text-sm font-medium">Admin</span>
        </div>

        <!-- Overview Section -->
        <div id="overview" class="space-y-8 mb-8">
            <h2 class="text-2xl font-bold gradient-border pb-2">Overview</h2>
            
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div class="glass-effect rounded-xl p-6 hover-scale">
                    <h3 class="text-gray-400 text-sm mb-2">Total Movies</h3>
                    <div class="text-3xl font-bold">{{stats.totalMovies}}</div>
                </div>
                <div class="glass-effect rounded-xl p-6 hover-scale">
                    <h3 class="text-gray-400 text-sm mb-2">Total Users</h3>
                    <div class="text-3xl font-bold">{{stats.totalUsers}}</div>
                </div>
                <div class="glass-effect rounded-xl p-6 hover-scale">
                    <h3 class="text-gray-400 text-sm mb-2">Active Users</h3>
                    <div class="text-3xl font-bold">0</div>
                </div>
                <div class="glass-effect rounded-xl p-6 hover-scale">
                    <h3 class="text-gray-400 text-sm mb-2">Revenue</h3>
                    <div class="text-3xl font-bold">$0</div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Recent Movies -->
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-xl font-bold mb-4">Recent Movies</h3>
                    <div class="space-y-4">
                        {{#each stats.recentMovies}}
                        <div class="flex items-center justify-between p-4 bg-white/5 rounded-lg hover-scale">
                            <div>
                                <h4 class="font-medium">{{this.title}}</h4>
                                <p class="text-sm text-gray-400">{{formatDate this.releaseDate}}</p>
                            </div>
                            <div class="flex space-x-2">
                                <button class="p-2 rounded-lg bg-red-600 hover:bg-red-700 transition-colors" onclick="editMovie('{{this._id}}')">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="p-2 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors" onclick="deleteMovie('{{this._id}}')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>

                <!-- Recent Users -->
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-xl font-bold mb-4">Recent Users</h3>
                    <div class="space-y-4">
                        {{#each stats.recentUsers}}
                        <div class="flex items-center justify-between p-4 bg-white/5 rounded-lg hover-scale">
                            <div>
                                <h4 class="font-medium">{{this.username}}</h4>
                                <p class="text-sm text-gray-400">{{formatDate this.createdAt}}</p>
                            </div>
                            <span class="px-3 py-1 rounded-full text-sm {{#if this.isAdmin}}bg-red-600{{else}}bg-gray-600{{/if}}">
                                {{#if this.isAdmin}}Admin{{else}}User{{/if}}
                            </span>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>

        <!-- Watch Movies Section -->
        <div class="p-6">
        <!-- Movies Section -->
        <div id="movies" class="mb-8">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">Movies</h2>
                <a href="/admin/add-movie" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors duration-300">
                    Add Movie
                </a>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {{#each stats.movies}}
                <div class="bg-gray-800 rounded-lg overflow-hidden shadow-lg transform transition-all duration-300 hover:scale-105">
                    <img src="{{this.posterPath}}" alt="{{this.title}}" class="w-full h-64 object-cover">
                    <div class="p-4">
                        <h3 class="text-xl font-semibold text-white mb-2">{{this.title}}</h3>
                        <p class="text-gray-400 mb-4">{{this.overview}}</p>
                        <div class="flex justify-between items-center mb-4">
                            <span class="text-red-500 font-medium">{{this.rating}}/10</span>
                            <span class="text-gray-400">{{this.genre}}</span>
                        </div>
                        <div class="flex space-x-2">
                            <a href="/admin/movies/{{this._id}}/watch" class="flex-1 bg-red-600 hover:bg-red-700 text-white text-center py-2 rounded-lg transition-colors duration-300">
                                Watch Now
                            </a>
                            <button onclick="editMovie('{{this._id}}')" class="p-2 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button onclick="deleteMovie('{{this._id}}')" class="p-2 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
                {{/each}}
            </div>
        </div>

        <!-- TV Shows Section -->
        <div id="tvshows" class="mb-8">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">TV Shows</h2>
                <a href="/admin/add-tvshow" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors duration-300">
                    Add TV Show
                </a>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {{#each stats.tvshows}}
                <div class="bg-gray-800 rounded-lg overflow-hidden shadow-lg transform transition-all duration-300 hover:scale-105">
                    <img src="{{this.posterPath}}" alt="{{this.name}}" class="w-full h-64 object-cover">
                    <div class="p-4">
                        <h3 class="text-xl font-semibold text-white mb-2">{{this.name}}</h3>
                        <p class="text-gray-400 mb-4">{{this.overview}}</p>
                        <div class="flex justify-between items-center mb-4">
                            <span class="text-red-500 font-medium">{{this.rating}}/10</span>
                            <span class="text-gray-400">{{this.genre}}</span>
                        </div>
                        <div class="flex space-x-2">
                            <a href="/admin/tvshows/{{this._id}}/watch" class="flex-1 bg-red-600 hover:bg-red-700 text-white text-center py-2 rounded-lg transition-colors duration-300">
                                Watch Now
                            </a>
                            <button onclick="editTVShow('{{this._id}}')" class="p-2 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button onclick="deleteTVShow('{{this._id}}')" class="p-2 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
                {{/each}}
            </div>
        </div>

        <!-- Users Section -->
        <div id="users" class="mb-8">
            <h2 class="text-2xl font-bold gradient-border pb-2 mb-6">Users</h2>
            <div class="glass-effect rounded-xl p-6">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b border-gray-700">
                                <th class="text-left py-3 px-4 text-gray-400">Username</th>
                                <th class="text-left py-3 px-4 text-gray-400">Email</th>
                                <th class="text-left py-3 px-4 text-gray-400">Role</th>
                                <th class="text-left py-3 px-4 text-gray-400">Joined</th>
                                <th class="text-left py-3 px-4 text-gray-400">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <!-- Users will be loaded dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Server Management Section -->
        <div id="server" class="space-y-8 mb-8">
            <h2 class="text-2xl font-bold gradient-border pb-2">Server Management</h2>
            
            <!-- Server Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div class="glass-effect rounded-xl p-6 hover-scale" id="sftp-total-files">
                    <h3 class="text-gray-400 text-sm mb-2">Total Files</h3>
                    <div class="text-3xl font-bold animate-pulse">...</div>
                </div>
                <div class="glass-effect rounded-xl p-6 hover-scale" id="sftp-total-storage">
                    <h3 class="text-gray-400 text-sm mb-2">Storage Used</h3>
                    <div class="text-3xl font-bold animate-pulse">...</div>
                </div>
                <div class="glass-effect rounded-xl p-6 hover-scale" id="sftp-movie-count">
                    <h3 class="text-gray-400 text-sm mb-2">Movie Files</h3>
                    <div class="text-3xl font-bold animate-pulse">...</div>
                </div>
                <div class="glass-effect rounded-xl p-6 hover-scale" id="sftp-tvshow-count">
                    <h3 class="text-gray-400 text-sm mb-2">TV Show Files</h3>
                    <div class="text-3xl font-bold animate-pulse">...</div>
                </div>
            </div>

            <!-- Server Status & File List -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Server Status -->
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-xl font-bold mb-4">SFTP Server Status</h3>
                    <div class="space-y-4" id="sftp-server-status">
                        <div class="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                            <span>Connection Status</span>
                            <span class="animate-pulse">Checking...</span>
                        </div>
                        <div class="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                            <span>Server Host</span>
                            <span class="animate-pulse">...</span>
                        </div>
                        <div class="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                            <span>Videos Path</span>
                            <span class="animate-pulse">...</span>
                        </div>
                    </div>
                    <div class="mt-4 flex justify-end">
                        <button onclick="refreshSftpStats()" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors duration-300">
                            <i class="bi bi-arrow-repeat mr-2"></i>Refresh
                        </button>
                    </div>
                </div>

                <!-- Largest Files -->
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-xl font-bold mb-4">Largest Video Files</h3>
                    <div class="space-y-4" id="sftp-file-list">
                        <div class="animate-pulse flex space-x-4">
                            <div class="bg-white/5 h-8 w-full rounded"></div>
                        </div>
                        <div class="animate-pulse flex space-x-4">
                            <div class="bg-white/5 h-8 w-full rounded"></div>
                        </div>
                        <div class="animate-pulse flex space-x-4">
                            <div class="bg-white/5 h-8 w-full rounded"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div id="modalsContainer">

        <!-- Add/Edit TV Show Modal -->
        

        <!-- Toast for notifications -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="toast" class="toast" role="alert">
                <div class="toast-header">
                    <strong class="me-auto">Notification</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                </div>
                <div class="toast-body"></div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Three.js Background Animation
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({
            canvas: document.querySelector('#background-canvas'),
            alpha: true
        });
        renderer.setSize(window.innerWidth, window.innerHeight);

        // Create particles
        const particlesGeometry = new THREE.BufferGeometry();
        const particlesCount = 5000;
        const posArray = new Float32Array(particlesCount * 3);

        for(let i = 0; i < particlesCount * 3; i++) {
            posArray[i] = (Math.random() - 0.5) * 5;
        }

        particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));

        const particlesMaterial = new THREE.PointsMaterial({
            size: 0.005,
            color: '#E50914',
            transparent: true,
            opacity: 0.8
        });

        const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
        scene.add(particlesMesh);

        camera.position.z = 2;

        // Animation
        function animate() {
            requestAnimationFrame(animate);
            particlesMesh.rotation.y += 0.001;
            renderer.render(scene, camera);
        }
        animate();

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // Load movies
        async function loadMovies() {
            const tbody = document.getElementById('moviesTableBody');
            tbody.innerHTML = '<tr><td colspan="5" class="text-center">Loading...</td></tr>';
            
            try {
                const response = await fetch('/admin/movies');
                const data = await response.json();
                if (data.success) {
                    if (data.movies.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="5" class="text-center">No movies found</td></tr>';
                        return;
                    }
                    tbody.innerHTML = data.movies.map(movie => `
                        <tr>
                            <td>${movie.title}</td>
                            <td>${movie.genre}</td>
                            <td>${new Date(movie.releaseDate).toLocaleDateString()}</td>
                            <td>${movie.rating}</td>
                            <td>
                                <button class="btn btn-sm btn-netflix" onclick="editMovie('${movie._id}')">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteMovie('${movie._id}')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `).join('');
                } else {
                    tbody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Error loading movies</td></tr>';
                    showToast(data.error || 'Error loading movies', 'error');
                }
            } catch (error) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Error loading movies</td></tr>';
                showToast('Error loading movies', 'error');
                console.error('Error:', error);
            }
        }

        // Load users
        async function loadUsers() {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = '<tr><td colspan="5" class="text-center">Loading...</td></tr>';
            
            try {
                const response = await fetch('/admin/users');
                const data = await response.json();
                if (data.success) {
                    if (data.users.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="5" class="text-center">No users found</td></tr>';
                        return;
                    }
                    tbody.innerHTML = data.users.map(user => `
                        <tr>
                            <td>${user.username}</td>
                            <td>${user.email}</td>
                            <td>
                                <span class="badge ${user.isAdmin ? 'bg-danger' : 'bg-secondary'}">
                                    ${user.isAdmin ? 'Admin' : 'User'}
                                </span>
                            </td>
                            <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                            <td>
                                <button class="btn btn-sm btn-netflix" onclick="toggleUserRole('${user._id}', ${!user.isAdmin})">
                                    ${user.isAdmin ? 'Remove Admin' : 'Make Admin'}
                                </button>
                            </td>
                        </tr>
                    `).join('');
                } else {
                    tbody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Error loading users</td></tr>';
                    showToast(data.error || 'Error loading users', 'error');
                }
            } catch (error) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Error loading users</td></tr>';
                showToast('Error loading users', 'error');
                console.error('Error:', error);
            }
        }

        // Movie management functions
        function showAddMovieModal() {
            document.getElementById('movieModalTitle').textContent = 'Add Movie';
            document.getElementById('movieForm').reset();
            document.getElementById('movieId').value = '';
            const modal = new bootstrap.Modal(document.getElementById('movieModal'));
            modal.show();
        }

        async function editMovie(id) {
            try {
                const response = await fetch(`/admin/movies/${id}`);
                const data = await response.json();
                if (data.success) {
                    const movie = data.movie;
                    document.getElementById('movieModalTitle').textContent = 'Edit Movie';
                    document.getElementById('movieId').value = movie._id;
                    document.getElementById('movieTitle').value = movie.title;
                    document.getElementById('movieGenre').value = movie.genre;
                    document.getElementById('movieReleaseDate').value = new Date(movie.releaseDate).toISOString().split('T')[0];
                    document.getElementById('movieRating').value = movie.rating;
                    document.getElementById('movieDescription').value = movie.description || '';
                    document.getElementById('movieImage').value = movie.imageUrl || '';
                    const modal = new bootstrap.Modal(document.getElementById('movieModal'));
                    modal.show();
                }
            } catch (error) {
                showToast('Error loading movie details', 'error');
            }
        }

        async function saveMovie() {
            const form = document.getElementById('movieForm');
            const movieId = document.getElementById('movieId').value;
            
            // Form validation
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const movieData = {
                title: document.getElementById('movieTitle').value.trim(),
                genre: document.getElementById('movieGenre').value.trim(),
                releaseDate: document.getElementById('movieReleaseDate').value,
                rating: parseFloat(document.getElementById('movieRating').value),
                description: document.getElementById('movieDescription').value.trim()
            };

            // Additional validation
            if (movieData.rating < 0 || movieData.rating > 10) {
                showToast('Rating must be between 0 and 10', 'error');
                return;
            }

            try {
                const url = movieId ? `/admin/movies/${movieId}` : '/admin/movies/add';
                const method = movieId ? 'PUT' : 'POST';
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(movieData)
                });
                const data = await response.json();
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('movieModal')).hide();
                    loadMovies();
                    showToast(movieId ? 'Movie updated successfully' : 'Movie added successfully', 'success');
                } else {
                    showToast(data.error || 'Error saving movie', 'error');
                }
            } catch (error) {
                showToast('Error saving movie', 'error');
                console.error('Error:', error);
            }
        }

        async function deleteMovie(id) {
            if (confirm('Are you sure you want to delete this movie?')) {
                try {
                    const response = await fetch(`/admin/movies/${id}`, {
                        method: 'DELETE'
                    });
                    const data = await response.json();
                    if (data.success) {
                        loadMovies();
                        showToast('Movie deleted successfully', 'success');
                    }
                } catch (error) {
                    showToast('Error deleting movie', 'error');
                }
            }
        }

        // User management functions
        async function toggleUserRole(userId, isAdmin) {
            const action = isAdmin ? 'make an admin' : 'remove admin privileges';
            if (!confirm(`Are you sure you want to ${action} for this user?`)) {
                return;
            }

            try {
                const response = await fetch(`/admin/users/${userId}/role`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ isAdmin })
                });
                const data = await response.json();
                if (data.success) {
                    loadUsers();
                    showToast(`User role ${isAdmin ? 'updated to admin' : 'removed from admin'}`, 'success');
                } else {
                    showToast(data.error || 'Error updating user role', 'error');
                }
            } catch (error) {
                showToast('Error updating user role', 'error');
                console.error('Error:', error);
            }
        }

        // TV Show Management
        async function loadTVShows() {
            const tbody = document.getElementById('tvShowsTableBody');
            tbody.innerHTML = '<tr><td colspan="6" class="text-center">Loading...</td></tr>';
            
            try {
                const response = await fetch('/admin/tvshows');
                const data = await response.json();
                if (data.success) {
                    if (data.tvShows.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="6" class="text-center">No TV shows found</td></tr>';
                        return;
                    }
                    tbody.innerHTML = data.tvShows.map(show => `
                        <tr>
                            <td>${show.title}</td>
                            <td>${show.genre}</td>
                            <td>${show.seasons}</td>
                            <td>
                                <span class="badge ${getStatusBadgeClass(show.status)}">
                                    ${show.status}
                                </span>
                            </td>
                            <td>${show.rating}</td>
                            <td>
                                <button class="btn btn-sm btn-netflix" onclick="editTVShow('${show._id}')">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteTVShow('${show._id}')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `).join('');
                } else {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-center text-danger">Error loading TV shows</td></tr>';
                    showToast(data.error || 'Error loading TV shows', 'error');
                }
            } catch (error) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center text-danger">Error loading TV shows</td></tr>';
                showToast('Error loading TV shows', 'error');
                console.error('Error:', error);
            }
        }

        function getStatusBadgeClass(status) {
            switch(status.toLowerCase()) {
                case 'ongoing': return 'bg-success';
                case 'completed': return 'bg-info';
                case 'cancelled': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        function showAddTVShowModal() {
            document.getElementById('tvShowModalTitle').textContent = 'Add TV Show';
            document.getElementById('tvShowForm').reset();
            document.getElementById('tvShowId').value = '';
            const modal = new bootstrap.Modal(document.getElementById('tvShowModal'));
            modal.show();
        }

        async function editTVShow(id) {
            try {
                const response = await fetch(`/admin/tvshows/${id}`);
                const data = await response.json();
                if (data.success) {
                    const show = data.tvShow;
                    document.getElementById('tvShowModalTitle').textContent = 'Edit TV Show';
                    document.getElementById('tvShowId').value = show._id;
                    document.getElementById('tvShowTitle').value = show.title;
                    document.getElementById('tvShowGenre').value = show.genre;
                    document.getElementById('tvShowSeasons').value = show.seasons;
                    document.getElementById('tvShowStatus').value = show.status;
                    document.getElementById('tvShowRating').value = show.rating;
                    document.getElementById('tvShowDescription').value = show.description || '';
                    document.getElementById('tvShowImage').value = show.imageUrl || '';
                    const modal = new bootstrap.Modal(document.getElementById('tvShowModal'));
                    modal.show();
                }
            } catch (error) {
                showToast('Error loading TV show details', 'error');
            }
        }

        async function saveTVShow() {
            const form = document.getElementById('tvShowForm');
            const tvShowId = document.getElementById('tvShowId').value;
            
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const tvShowData = {
                title: document.getElementById('tvShowTitle').value.trim(),
                genre: document.getElementById('tvShowGenre').value.trim(),
                seasons: parseInt(document.getElementById('tvShowSeasons').value),
                status: document.getElementById('tvShowStatus').value,
                rating: parseFloat(document.getElementById('tvShowRating').value),
                description: document.getElementById('tvShowDescription').value.trim(),
                imageUrl: document.getElementById('tvShowImage').value.trim()
            };

            if (tvShowData.rating < 0 || tvShowData.rating > 10) {
                showToast('Rating must be between 0 and 10', 'error');
                return;
            }

            try {
                const url = tvShowId ? `/admin/tvshows/${tvShowId}` : '/admin/tvshows/add';
                const method = tvShowId ? 'PUT' : 'POST';
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(tvShowData)
                });
                const data = await response.json();
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('tvShowModal')).hide();
                    loadTVShows();
                    showToast(tvShowId ? 'TV Show updated successfully' : 'TV Show added successfully', 'success');
                } else {
                    showToast(data.error || 'Error saving TV Show', 'error');
                }
            } catch (error) {
                showToast('Error saving TV Show', 'error');
                console.error('Error:', error);
            }
        }

        // Server Management
        async function checkServerStatus() {
            try {
                const response = await fetch('/admin/server/status');
                const data = await response.json();
                if (data.success) {
                    updateServerStatus(data.status);
                    updateServerStats(data.stats);
                }
            } catch (error) {
                console.error('Error checking server status:', error);
            }
        }

        function updateServerStatus(status) {
            const indicator = document.getElementById('serverStatusIndicator');
            const statusText = document.getElementById('serverStatusText');
            
            if (status.isRunning) {
                indicator.className = 'status-indicator online';
                statusText.textContent = 'Server is running';
                statusText.className = 'text-success';
            } else {
                indicator.className = 'status-indicator offline';
                statusText.textContent = 'Server is stopped';
                statusText.className = 'text-danger';
            }
        }

        function updateServerStats(stats) {
            // Update progress bars
            document.getElementById('cpuUsage').style.width = `${stats.cpu}%`;
            document.getElementById('memoryUsage').style.width = `${stats.memory}%`;
            document.getElementById('diskUsage').style.width = `${stats.disk}%`;
            document.getElementById('networkUsage').style.width = `${stats.network}%`;

            // Update percentage text
            document.getElementById('cpuUsageText').textContent = `${stats.cpu}%`;
            document.getElementById('memoryUsageText').textContent = `${stats.memory}%`;
            document.getElementById('diskUsageText').textContent = `${stats.disk}%`;
            document.getElementById('networkUsageText').textContent = `${stats.network}%`;
        }

        async function startServer() {
            try {
                const response = await fetch('/admin/server/start', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showToast('Server started successfully', 'success');
                    checkServerStatus();
                } else {
                    showToast(data.error || 'Error starting server', 'error');
                }
            } catch (error) {
                showToast('Error starting server', 'error');
            }
        }

        async function stopServer() {
            if (!confirm('Are you sure you want to stop the server?')) return;
            
            try {
                const response = await fetch('/admin/server/stop', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showToast('Server stopped successfully', 'success');
                    checkServerStatus();
                } else {
                    showToast(data.error || 'Error stopping server', 'error');
                }
            } catch (error) {
                showToast('Error stopping server', 'error');
            }
        }

        async function restartServer() {
            if (!confirm('Are you sure you want to restart the server?')) return;
            
            try {
                const response = await fetch('/admin/server/restart', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    showToast('Server restarting...', 'success');
                    setTimeout(checkServerStatus, 5000);
                } else {
                    showToast(data.error || 'Error restarting server', 'error');
                }
            } catch (error) {
                showToast('Error restarting server', 'error');
            }
        }

        // Toast notification function
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastBody = toast.querySelector('.toast-body');
            toastBody.textContent = message;
            toast.classList.remove('bg-success', 'bg-danger');
            toast.classList.add(type === 'success' ? 'bg-success' : 'bg-danger');
            new bootstrap.Toast(toast).show();
        }

        // Initialize modals when page loads
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize Bootstrap modals
            const movieModal = new bootstrap.Modal(document.getElementById('movieModal'));
            const tvShowModal = new bootstrap.Modal(document.getElementById('tvShowModal'));

            // Add click event listeners to buttons
            document.querySelector('[onclick="showAddMovieModal()"]').addEventListener('click', showAddMovieModal);
            document.querySelector('[onclick="showAddTVShowModal()"]').addEventListener('click', showAddTVShowModal);

            // Load initial data
            loadMovies();
            loadUsers();
            loadTVShows();
            checkServerStatus();
            
            // Check server status every 30 seconds
            setInterval(checkServerStatus, 30000);
        });

        // Add authentication check function
        async function checkAuth() {
            try {
                const response = await fetch('/admin/check');
                const data = await response.json();
                if (!data.success) {
                    window.location.href = '/admin/login';
                }
            } catch (error) {
                console.error('Auth check failed:', error);
                window.location.href = '/admin/login';
            }
        }

        // Check authentication periodically
        setInterval(checkAuth, 60000); // Check every minute

        // Initial auth check
        checkAuth();

        // Add smooth scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });

        // Add intersection observer for fade-in animations
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('opacity-100', 'translate-y-0');
                    entry.target.classList.remove('opacity-0', 'translate-y-4');
                }
            });
        });

        document.querySelectorAll('.glass-effect').forEach((el) => {
            el.classList.add('transition-all', 'duration-500', 'opacity-0', 'translate-y-4');
            observer.observe(el);
        });

        // Function to fetch and display SFTP server statistics
        async function fetchSftpStats() {
            try {
                // Show loading state
                document.getElementById('sftp-total-files').querySelector('div').classList.add('animate-pulse');
                document.getElementById('sftp-total-files').querySelector('div').textContent = '...';
                document.getElementById('sftp-total-storage').querySelector('div').classList.add('animate-pulse');
                document.getElementById('sftp-total-storage').querySelector('div').textContent = '...';
                document.getElementById('sftp-movie-count').querySelector('div').classList.add('animate-pulse');
                document.getElementById('sftp-movie-count').querySelector('div').textContent = '...';
                document.getElementById('sftp-tvshow-count').querySelector('div').classList.add('animate-pulse');
                document.getElementById('sftp-tvshow-count').querySelector('div').textContent = '...';
                
                // Make API request to get SFTP statistics
                const response = await fetch('/admin/api/sftp/stats');
                if (!response.ok) {
                    throw new Error('Failed to fetch SFTP statistics');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.error || 'Unknown error occurred');
                }
                
                // Update statistics cards
                document.getElementById('sftp-total-files').querySelector('div').textContent = data.stats.totalFiles;
                document.getElementById('sftp-total-files').querySelector('div').classList.remove('animate-pulse');
                
                document.getElementById('sftp-total-storage').querySelector('div').textContent = data.stats.formattedSize;
                document.getElementById('sftp-total-storage').querySelector('div').classList.remove('animate-pulse');
                
                document.getElementById('sftp-movie-count').querySelector('div').textContent = data.stats.movieCount;
                document.getElementById('sftp-movie-count').querySelector('div').classList.remove('animate-pulse');
                
                document.getElementById('sftp-tvshow-count').querySelector('div').textContent = data.stats.tvShowCount;
                document.getElementById('sftp-tvshow-count').querySelector('div').classList.remove('animate-pulse');
                
                // Update server status
                const serverStatusHtml = `
                    <div class="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                        <span>Connection Status</span>
                        <span class="px-2 py-1 rounded-full text-xs ${data.server.isConnected ? 'bg-green-500' : 'bg-red-500'} text-white">
                            ${data.server.isConnected ? 'Connected' : 'Disconnected'}
                        </span>
                    </div>
                    <div class="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                        <span>Server Host</span>
                        <span>${data.server.host}:${data.server.port}</span>
                    </div>
                    <div class="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                        <span>Videos Path</span>
                        <span class="text-sm">${data.server.remoteBasePath}/${data.server.videosPath}</span>
                    </div>
                `;
                document.getElementById('sftp-server-status').innerHTML = serverStatusHtml;
                
                // Update file list
                const fileListHtml = data.recentFiles.map(file => `
                    <div class="flex justify-between items-center p-4 bg-white/5 rounded-lg hover-scale">
                        <div>
                            <h4 class="font-medium ${
                                file.type === 'movie' ? 'text-blue-400' : 
                                file.type === 'tvshow' ? 'text-green-400' : 'text-gray-400'
                            }">${file.name}</h4>
                            <p class="text-sm text-gray-400">Last modified: ${new Date(file.lastModified).toLocaleString()}</p>
                        </div>
                        <div class="text-right">
                            <span class="text-white font-medium">${formatFileSize(file.size)}</span>
                            <span class="ml-2 px-2 py-1 rounded-full text-xs ${
                                file.type === 'movie' ? 'bg-blue-600' : 
                                file.type === 'tvshow' ? 'bg-green-600' : 'bg-gray-600'
                            } text-white">
                                ${file.type.charAt(0).toUpperCase() + file.type.slice(1)}
                            </span>
                        </div>
                    </div>
                `).join('');
                
                document.getElementById('sftp-file-list').innerHTML = fileListHtml;
                
            } catch (error) {
                console.error('Error fetching SFTP stats:', error);
                
                // Show error state
                const errorHtml = `
                    <div class="flex justify-between items-center p-4 bg-red-900/30 rounded-lg">
                        <span>Error</span>
                        <span>${error.message}</span>
                    </div>
                    <div class="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                        <span>Connection Status</span>
                        <span class="px-2 py-1 rounded-full text-xs bg-red-500 text-white">Failed</span>
                    </div>
                `;
                document.getElementById('sftp-server-status').innerHTML = errorHtml;
                document.getElementById('sftp-file-list').innerHTML = '<div class="text-red-500">Failed to load file list</div>';
                
                // Update cards with error state
                document.getElementById('sftp-total-files').querySelector('div').textContent = 'Error';
                document.getElementById('sftp-total-files').querySelector('div').classList.remove('animate-pulse');
                document.getElementById('sftp-total-storage').querySelector('div').textContent = 'Error';
                document.getElementById('sftp-total-storage').querySelector('div').classList.remove('animate-pulse');
                document.getElementById('sftp-movie-count').querySelector('div').textContent = 'Error';
                document.getElementById('sftp-movie-count').querySelector('div').classList.remove('animate-pulse');
                document.getElementById('sftp-tvshow-count').querySelector('div').textContent = 'Error';
                document.getElementById('sftp-tvshow-count').querySelector('div').classList.remove('animate-pulse');
            }
        }
        
        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        // Function to manually refresh SFTP stats
        function refreshSftpStats() {
            fetchSftpStats();
        }
        
        // Fetch SFTP stats on page load
        document.addEventListener('DOMContentLoaded', fetchSftpStats);
    </script>
</body>
</html> 