<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up - Netflix Clone</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Netflix+Sans:wght@300;400;500;700&display=swap');

        :root {
            --netflix-red: #E50914;
            --netflix-black: #141414;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Netflix Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
        }

        #background-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .glass-effect {
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .form-field {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .form-input {
            width: 100%;
            padding: 1rem 1.25rem;
            background: rgba(0, 0, 0, 0.5);
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 0.5rem;
            color: white;
            font-size: 1rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            height: 3.5rem;
            line-height: 1.5;
        }

        .form-label {
            position: absolute;
            left: 1.25rem;
            top: 1.1rem;
            color: rgba(255, 255, 255, 0.6);
            font-size: 1rem;
            pointer-events: none;
            transition: all 0.2s ease-out;
            line-height: 1.25;
            padding: 0 0.25rem;
            transform-origin: left top;
        }

        .form-input:focus + .form-label,
        .form-input:not(:placeholder-shown) + .form-label {
            transform: translateY(-1.4rem) scale(0.85);
            color: var(--netflix-red);
            background-color: rgba(20, 20, 20, 0.95);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--netflix-red);
            box-shadow: 0 0 0 2px rgba(229, 9, 20, 0.25);
            background: rgba(0, 0, 0, 0.7);
        }

        .password-requirements {
            margin-top: 0.5rem;
            font-size: 0.875rem;
            color: var(--netflix-red);
        }

        .password-requirements ul {
            margin-top: 0.5rem;
            list-style: none;
        }

        .password-requirements li {
            display: flex;
            align-items: center;
            margin-bottom: 0.25rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .password-requirements li::before {
            content: "â€¢";
            color: rgba(255, 255, 255, 0.6);
            margin-right: 0.5rem;
        }

        .signup-btn {
            background: linear-gradient(45deg, var(--netflix-red), #ff4b2b);
            transition: all 0.3s ease;
        }

        .signup-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(229, 9, 20, 0.3);
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center bg-black p-4">
    <canvas id="background-canvas"></canvas>

    <div class="glass-effect w-full max-w-md p-8 rounded-2xl space-y-8 transform transition-all duration-500 hover:scale-[1.02]">
        <!-- Netflix Logo -->
        <div class="flex justify-center mb-8">
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/200px-Netflix_2015_logo.svg.png" 
                 alt="Netflix Logo" 
                 class="w-32 filter brightness-0 invert">
        </div>

        <h1 class="text-3xl font-bold text-center text-white mb-8">Sign Up</h1>

        {{#if error}}
        <div class="bg-red-500/20 border border-red-500/50 text-red-500 px-4 py-3 rounded-lg text-center text-sm">
            {{error}}
        </div>
        {{/if}}

        <form action="/register" method="POST" class="space-y-6">
            <div class="form-field">
                <input type="email" 
                       id="email" 
                       name="email" 
                       class="form-input"
                       placeholder=" "
                       autocomplete="email"
                       required>
                <label for="email" class="form-label">Email</label>
            </div>

            <div class="form-field">
                <input type="password" 
                       id="password" 
                       name="password" 
                       class="form-input"
                       placeholder=" "
                       autocomplete="new-password"
                       required>
                <label for="password" class="form-label">Password</label>
                <button type="button" 
                        class="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                        onclick="togglePassword()">
                    <svg xmlns="http://www.w3.org/2000/svg" 
                         class="h-5 w-5" 
                         fill="none" 
                         viewBox="0 0 24 24" 
                         stroke="currentColor">
                        <path stroke-linecap="round" 
                              stroke-linejoin="round" 
                              stroke-width="2" 
                              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" 
                              stroke-linejoin="round" 
                              stroke-width="2" 
                              d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                </button>
                <div class="password-requirements">
                    <p class="text-white/60 text-sm mb-1">Password should contain:</p>
                    <ul>
                        <li>At least 8 characters</li>
                        <li>One uppercase letter</li>
                        <li>One lowercase letter</li>
                        <li>One number</li>
                        <li>One special character</li>
                    </ul>
                </div>
            </div>

            <div class="form-field">
                <div class="flex items-center">
                    <input type="checkbox" 
                           id="isPremium" 
                           name="isPremium" 
                           class="h-4 w-4 bg-black border-gray-300 rounded">
                    <label for="isPremium" class="ml-2 block text-sm text-gray-400">
                        Sign up for Premium (Access all content)
                    </label>
                </div>
            </div>

            <button type="submit" 
                    class="signup-btn w-full py-3 rounded-lg text-white font-semibold transform transition-all duration-300 hover:scale-[1.02]">
                Sign Up
            </button>
            
            <div class="text-center text-gray-400 mt-6">
                <p>Already have an account? <a href="/login" class="text-white hover:underline">Sign in</a></p>
            </div>
            
            <div class="text-center">
                <a href="/" class="text-sm text-gray-400 hover:text-white transition">
                    Back to home
                </a>
            </div>
        </form>
    </div>

    <script>
        // Three.js Wave Animation
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({
            canvas: document.querySelector('#background-canvas'),
            alpha: true,
            antialias: true
        });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

        // Create wave geometry
        const waveGeometry = new THREE.PlaneGeometry(20, 20, 150, 150);
        const waveMaterial = new THREE.ShaderMaterial({
            uniforms: {
                uTime: { value: 0 },
                uColor: { value: new THREE.Color('#E50914') },
                uMouse: { value: new THREE.Vector2(0, 0) }
            },
            vertexShader: `
                uniform float uTime;
                uniform vec2 uMouse;
                varying vec2 vUv;
                varying float vElevation;

                void main() {
                    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
                    
                    float elevation = sin(modelPosition.x * 2.0 + uTime * 2.0) * 0.2
                                  * sin(modelPosition.y * 2.0 + uTime * 2.0) * 0.2;
                    
                    float distanceToMouse = length(uv - uMouse);
                    float mouseRipple = sin(distanceToMouse * 10.0 - uTime * 5.0) * 0.1
                                    * smoothstep(0.5, 0.0, distanceToMouse);
                    
                    elevation += mouseRipple;
                    
                    modelPosition.z += elevation;
                    
                    vElevation = elevation;
                    vUv = uv;

                    vec4 viewPosition = viewMatrix * modelPosition;
                    vec4 projectedPosition = projectionMatrix * viewPosition;

                    gl_Position = projectedPosition;
                }
            `,
            fragmentShader: `
                uniform vec3 uColor;
                varying vec2 vUv;
                varying float vElevation;

                void main() {
                    float intensity = vElevation * 5.0 + 0.5;
                    vec3 color = mix(uColor, vec3(1.0), vElevation * 0.5);
                    gl_FragColor = vec4(color, intensity * 0.7);
                }
            `,
            transparent: true,
            side: THREE.DoubleSide
        });

        const waves = new THREE.Mesh(waveGeometry, waveMaterial);
        waves.rotation.x = -Math.PI * 0.45;
        scene.add(waves);

        camera.position.set(0, 0, 3);

        // Mouse interaction
        const mouse = {
            x: 0,
            y: 0,
            target: { x: 0, y: 0 }
        };

        document.addEventListener('mousemove', (event) => {
            mouse.target.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.target.y = -(event.clientY / window.innerHeight) * 2 + 1;
        });

        // Animation
        const clock = new THREE.Clock();

        function animate() {
            const elapsedTime = clock.getElapsedTime();

            mouse.x += (mouse.target.x - mouse.x) * 0.05;
            mouse.y += (mouse.target.y - mouse.y) * 0.05;

            waveMaterial.uniforms.uTime.value = elapsedTime;
            waveMaterial.uniforms.uMouse.value.set(mouse.x * 0.5 + 0.5, mouse.y * 0.5 + 0.5);

            waves.rotation.z = elapsedTime * 0.05;

            renderer.render(scene, camera);
            requestAnimationFrame(animate);
        }
        animate();

        // Toggle password visibility
        function togglePassword() {
            const passwordInput = document.getElementById('password');
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
            } else {
                passwordInput.type = 'password';
            }
        }
    </script>
</body>
</html> 