<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome - Netflix Clone</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Netflix+Sans:wght@300;400;500;700&display=swap');

        :root {
            --netflix-red: #E50914;
            --netflix-black: #141414;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Netflix Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
        }

        #background-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .glass-effect {
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .netflix-btn {
            background: linear-gradient(45deg, var(--netflix-red), #ff4b2b);
            transition: all 0.3s ease;
        }

        .netflix-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(229, 9, 20, 0.3);
        }
        
        .choice-card {
            transition: all 0.3s ease;
        }
        
        .choice-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center bg-black p-4">
    <canvas id="background-canvas"></canvas>

    <div class="glass-effect w-full max-w-4xl p-8 rounded-2xl space-y-8">
        <!-- Netflix Logo -->
        <div class="flex justify-center mb-8">
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/200px-Netflix_2015_logo.svg.png" 
                 alt="Netflix Logo" 
                 class="w-48 filter brightness-0 invert">
        </div>

        <h1 class="text-4xl font-bold text-center text-white mb-10">Welcome to Netflix Clone</h1>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mt-10">
            <!-- Regular User Card -->
            <div class="glass-effect rounded-xl p-6 border border-white/10 choice-card">
                <div class="flex flex-col items-center text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24 text-white mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <h2 class="text-2xl font-bold text-white mb-4">Regular User</h2>
                    <p class="text-gray-400 mb-6">Watch your favorite movies and TV shows</p>
                    <div class="flex gap-4 w-full mt-4">
                        <a href="/login" class="netflix-btn w-1/2 py-3 rounded-lg text-white font-semibold text-center">
                            Login
                        </a>
                        <a href="/signup" class="bg-gray-800 hover:bg-gray-700 w-1/2 py-3 rounded-lg text-white font-semibold text-center transition duration-300">
                            Sign Up
                        </a>
                    </div>
                </div>
            </div>
            
            <!-- Admin Card -->
            <div class="glass-effect rounded-xl p-6 border border-white/10 choice-card">
                <div class="flex flex-col items-center text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24 text-white mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <h2 class="text-2xl font-bold text-white mb-4">Administrator</h2>
                    <p class="text-gray-400 mb-6">Manage content and user accounts</p>
                    <div class="flex gap-4 w-full mt-4">
                        <a href="/admin/login" class="netflix-btn w-1/2 py-3 rounded-lg text-white font-semibold text-center">
                            Login
                        </a>
                        <a href="/admin/register" class="bg-gray-800 hover:bg-gray-700 w-1/2 py-3 rounded-lg text-white font-semibold text-center transition duration-300">
                            Register
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Three.js Wave Animation
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({
            canvas: document.querySelector('#background-canvas'),
            alpha: true,
            antialias: true
        });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

        // Create wave geometry
        const waveGeometry = new THREE.PlaneGeometry(20, 20, 150, 150);
        const waveMaterial = new THREE.ShaderMaterial({
            uniforms: {
                uTime: { value: 0 },
                uColor: { value: new THREE.Color('#E50914') },
                uMouse: { value: new THREE.Vector2(0, 0) }
            },
            vertexShader: `
                uniform float uTime;
                uniform vec2 uMouse;
                varying vec2 vUv;
                varying float vElevation;

                void main() {
                    vec4 modelPosition = modelMatrix * vec4(position, 1.0);
                    
                    float elevation = sin(modelPosition.x * 2.0 + uTime * 2.0) * 0.2
                                  * sin(modelPosition.y * 2.0 + uTime * 2.0) * 0.2;
                    
                    float distanceToMouse = length(uv - uMouse);
                    float mouseRipple = sin(distanceToMouse * 10.0 - uTime * 5.0) * 0.1
                                    * smoothstep(0.5, 0.0, distanceToMouse);
                    
                    elevation += mouseRipple;
                    
                    modelPosition.z += elevation;
                    
                    vElevation = elevation;
                    vUv = uv;

                    vec4 viewPosition = viewMatrix * modelPosition;
                    vec4 projectedPosition = projectionMatrix * viewPosition;

                    gl_Position = projectedPosition;
                }
            `,
            fragmentShader: `
                uniform vec3 uColor;
                varying vec2 vUv;
                varying float vElevation;

                void main() {
                    float intensity = vElevation * 5.0 + 0.5;
                    vec3 color = mix(uColor, vec3(1.0), vElevation * 0.5);
                    gl_FragColor = vec4(color, intensity * 0.7);
                }
            `,
            transparent: true,
            side: THREE.DoubleSide
        });

        const waves = new THREE.Mesh(waveGeometry, waveMaterial);
        waves.rotation.x = -Math.PI * 0.45;
        scene.add(waves);

        camera.position.set(0, 0, 3);

        // Mouse interaction
        const mouse = {
            x: 0,
            y: 0,
            target: { x: 0, y: 0 }
        };

        document.addEventListener('mousemove', (event) => {
            mouse.target.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.target.y = -(event.clientY / window.innerHeight) * 2 + 1;
        });

        // Animation
        const clock = new THREE.Clock();

        function animate() {
            const elapsedTime = clock.getElapsedTime();

            mouse.x += (mouse.target.x - mouse.x) * 0.05;
            mouse.y += (mouse.target.y - mouse.y) * 0.05;

            waveMaterial.uniforms.uTime.value = elapsedTime;
            waveMaterial.uniforms.uMouse.value.set(mouse.x * 0.5 + 0.5, mouse.y * 0.5 + 0.5);

            waves.rotation.z = elapsedTime * 0.05;

            renderer.render(scene, camera);
            requestAnimationFrame(animate);
        }
        animate();

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        });
    </script>
</body>
</html> 